(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{410:function(t,e,s){t.exports=s.p+"assets/img/substrate-architecture.165c3188.png"},565:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hello-substrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hello-substrate"}},[t._v("#")]),t._v(" Hello Substrate")]),t._v(" "),a("p",[a("code",[t._v("pallets/hello-substrate")]),t._v(" "),a("a",{attrs:{href:"https://playground-staging.substrate.dev/?deploy=recipes&files=%2Fhome%2Fsubstrate%2Fworkspace%2Fpallets%2Fhello-substrate%2Fsrc%2Flib.rs",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/Playground-Try%20it!-brightgreen?logo=Parity%20Substrate",alt:"Try on playground"}}),t._v(" "),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://github.com/substrate-developer-hub/recipes/tree/master/pallets/hello-substrate/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/Github-View%20Code-brightgreen?logo=github",alt:"View on GitHub"}}),t._v(" "),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("The first pallet we'll explore is a simple \"hello world\" example. This pallet will have one\ndispatchable call that prints a message to the node's output. Because this is our first pallet,\nwe'll also explore the structure that every pallet has. This code lives in\n"),a("code",[t._v("pallets/hello-substrate/src/lib.rs")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"no-std"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-std"}},[t._v("#")]),t._v(" No Std")]),t._v(" "),a("p",[t._v("The very first line of code tells the rust compiler that this crate should not use rust's standard\nlibrary except when explicitly told to. This is useful because Substrate runtimes compile to Web\nAssembly where the standard library is not available.")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#![cfg_attr(not(feature = "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"std"')]),t._v("), no_std)]")]),t._v("\n")])])]),a("h2",{attrs:{id:"imports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imports"}},[t._v("#")]),t._v(" Imports")]),t._v(" "),a("p",[t._v("Next, you'll find imports that come from various parts of the Substrate framework. All pallets will\nimport from a few common crates including\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/index.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("frame-support")]),a("OutboundLink")],1),t._v(", and\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_system/index.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("frame-system")]),a("OutboundLink")],1),t._v(". Complex pallets will have many\nimports as we'll see later. The "),a("code",[t._v("hello-substrate")]),t._v(" pallet uses these imports.")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("frame_support"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" decl_module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("dispatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DispatchResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" debug "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("frame_system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ensure_signed "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sp_runtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tests"}},[t._v("#")]),t._v(" Tests")]),t._v(" "),a("p",[t._v("Next we see a reference to the tests module. This pallet has tests written in a separate file called\n"),a("code",[t._v("tests.rs")]),t._v(". We will not discuss the tests further at this point, but they are covered in the\n"),a("RouterLink",{attrs:{to:"/zh/3-entrees/testing/"}},[t._v("Testing section")]),t._v(" of the book.")],1),t._v(" "),a("h2",{attrs:{id:"configuration-trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-trait"}},[t._v("#")]),t._v(" Configuration Trait")]),t._v(" "),a("p",[t._v("Next, each pallet has a configuration trait which is called "),a("code",[t._v("Trait")]),t._v(". The configuration trait can be\nused to access features from other pallets, or "),a("RouterLink",{attrs:{to:"/zh/3-entrees/constants.html"}},[t._v("constants")]),t._v(" that affect\nthe pallet's behavior. This pallet is simple enough that our configuration trait can remain empty,\nalthough it must still exist.")],1),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("system"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"dispatchable-calls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatchable-calls"}},[t._v("#")]),t._v(" Dispatchable Calls")]),t._v(" "),a("p",[t._v('A Dispatchable call is a function that a blockchain user can call as part of an Extrinsic.\n"Extrinsic" is Substrate jargon meaning a call from outside of the chain. Most of the time they are\ntransactions, and for now it is fine to think of them as transactions. Dispatchable calls are\ndefined in the\n'),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/macro.decl_module.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("decl_module!")]),t._v(" macro"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("decl_module!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Module")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Call")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Origin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A function that says hello to the user by printing messages to the node log")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[weight = 10_000]")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("say_hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DispatchResult")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// More dispatchable calls could go here")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("As you can see, our "),a("code",[t._v("hello-substrate")]),t._v(" pallet has a dispatchable call that takes a single argument,\ncalled "),a("code",[t._v("origin")]),t._v(" which we'll investigate shortly. The call returns a\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/dispatch/type.DispatchResult.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("DispatchResult")]),a("OutboundLink")],1),t._v(" which\ncan be either "),a("code",[t._v("Ok(())")]),t._v(" indicating that the call succeeded, or an "),a("code",[t._v("Err")]),t._v(" which we'll investigate in\nthe "),a("RouterLink",{attrs:{to:"/zh/2-appetizers/3-errors.html"}},[t._v("appetizer about errors")]),t._v(".")],1),t._v(" "),a("h3",{attrs:{id:"weight-annotations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weight-annotations"}},[t._v("#")]),t._v(" Weight Annotations")]),t._v(" "),a("p",[t._v("Right before the "),a("code",[t._v("hello-substrate")]),t._v(" function, we see the line "),a("code",[t._v("#[weight = 10_000]")]),t._v(". This line\nattaches a default weight to the call. Ultimately weights affect the fees a user will have to pay to\ncall the function. Weights are a very interesting aspect of developing with Substrate, but they too\nshall be covered later in the section on "),a("RouterLink",{attrs:{to:"/zh/3-entrees/weights.html"}},[t._v("Weights")]),t._v(". For now, and for may of\nthe recipes pallets, we will simply use the default weight as we have done here.")],1),t._v(" "),a("h2",{attrs:{id:"inside-a-dispatchable-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inside-a-dispatchable-call"}},[t._v("#")]),t._v(" Inside a Dispatchable Call")]),t._v(" "),a("p",[t._v("Let's take a closer look at our dispatchable call.")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("say_hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DispatchResult")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ensure that the caller is a regular keypair account")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" caller "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ensure_signed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Print a message")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Inspecting variables")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("info!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Request sent by: {:?}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" caller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate that this call succeeded")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("This function essentially does three things. First, it uses the\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_system/fn.ensure_signed.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("ensure_signed")]),t._v(" function"),a("OutboundLink")],1),t._v(" to ensure\nthat the caller of the function was a regular user who owns a private key. This function also\nreturns who that caller was. We store the caller's identity in the "),a("code",[t._v("caller")]),t._v(" variable.")]),t._v(" "),a("p",[t._v("Second, it prints a message and logs the caller. Notice that we aren't using Rust's normal\n"),a("code",[t._v("println!")]),t._v(" macro, but rather a special\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_runtime/fn.print.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("print")]),t._v(" function"),a("OutboundLink")],1),t._v(" and\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/debug/macro.info.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("debug::info!")]),t._v(" macro"),a("OutboundLink")],1),t._v(". The reason for\nthis is explained in the next section.")]),t._v(" "),a("p",[t._v("Finally, the call returns "),a("code",[t._v("Ok(())")]),t._v(" to indicate that the call has succeeded. At a glance it seems\nthat there is no way for this call to fail, but this is not quite true. The "),a("code",[t._v("ensure_signed")]),t._v("\nfunction, used at the beginning, can return an error if the call was not from a signed origin. This\nis the first time we're seeing the important paradigm \""),a("strong",[t._v("Verify first, write last")]),t._v("\". In Substrate\ndevelopment, it is important that you always ensure preconditions are met and return errors at the\nbeginning. After these checks have completed, then you may begin the function's computation.")]),t._v(" "),a("h2",{attrs:{id:"printing-from-the-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#printing-from-the-runtime"}},[t._v("#")]),t._v(" Printing from the Runtime")]),t._v(" "),a("p",[t._v("Printing to the terminal from a Rust program is typically very simple using the "),a("code",[t._v("println!")]),t._v(" macro.\nHowever, Substrate runtimes are compiled to both Web Assembly and a regular native binary, and do\nnot have access to rust's standard library. That means we cannot use the regular "),a("code",[t._v("println!")]),t._v(". I\nencourage you to modify the code to try using "),a("code",[t._v("println!")]),t._v(" and confirm that it will not compile.\nNonetheless, printing a message from the runtime is useful both for logging information, and also\nfor debugging.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(410),alt:"Substrate Architecture Diagram"}})]),t._v(" "),a("p",[t._v("At the top of our pallet, we imported "),a("code",[t._v("sp_runtime")]),t._v("'s\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_runtime/fn.print.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("print")]),t._v(" function"),a("OutboundLink")],1),t._v(". This special function allows\nthe runtime to pass a message for printing to the outer part of the node which is not compiled to\nWasm and does have access to the standard library and can perform regular IO. This function is only\nable to print items that implement the\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_runtime/traits/trait.Printable.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Printable")]),t._v(" trait"),a("OutboundLink")],1),t._v(". Luckily all\nthe primitive types already implement this trait, and you can implement the trait for your own\ndatatypes too.")]),t._v(" "),a("p",[a("strong",[t._v("Print function note:")]),t._v(" To actually see the printed messages, we need to use the flag\n"),a("code",[t._v("-lruntime=debug")]),t._v(" when running the kitchen node. So, for the kitchen node, the command would become\n"),a("code",[t._v("./target/release/kitchen-node --dev -lruntime=debug")]),t._v(".")]),t._v(" "),a("p",[t._v("The next line demonstrates using "),a("code",[t._v("debug::info!")]),t._v(" macro to log to the screen and also inspecting the\nvariable's content. The syntax inside the macro is very similar to what regular rust macro\n"),a("code",[t._v("println!")]),t._v(" takes.")]),t._v(" "),a("p",[a("strong",[t._v("Runtime logger note:")]),t._v(" When we execute the runtime in native, "),a("code",[t._v("debug::info!")]),t._v(" messages are printed.\nHowever, if we execute the runtime in Wasm, then an additional step to initialise\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/debug/struct.RuntimeLogger.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RuntimeLogger"),a("OutboundLink")],1),t._v(" is required.")]),t._v(" "),a("h2",{attrs:{id:"installing-the-pallet-in-a-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-pallet-in-a-runtime"}},[t._v("#")]),t._v(" Installing the Pallet in a Runtime")]),t._v(" "),a("p",[t._v("In order to actually use a pallet, it must be installed in a Substrate runtime. This particular\npallet is installed in the "),a("code",[t._v("super-runtime")]),t._v(" which you built as part of the kitchen node. To install a\npallet in a runtime, you must do three things.")]),t._v(" "),a("h3",{attrs:{id:"depend-on-the-pallet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#depend-on-the-pallet"}},[t._v("#")]),t._v(" Depend on the Pallet")]),t._v(" "),a("p",[t._v("First we must include the pallet in our runtime's "),a("code",[t._v("Cargo.toml")]),t._v(" file. In the case of the\nsuper-runtime, this file is at "),a("code",[t._v("runtimes/super-runtime/Cargo.toml")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --snip--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("hello-substrate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("path")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../../pallets/hello-substrate"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("default-features")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Because the runtime is compiled to both native and Wasm, we must ensure that our pallet is built to\nthe correct target as well. At the bottom of the "),a("code",[t._v("Cargo.toml")]),t._v(" file, we see this.")]),t._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("features")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"std"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[t._v("std")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --snip--")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello-substrate/std"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"implement-its-configuration-trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implement-its-configuration-trait"}},[t._v("#")]),t._v(" Implement its Configuration Trait")]),t._v(" "),a("p",[t._v("Next we must implement the pallet's configuration trait. This happens in the runtime's main "),a("code",[t._v("lib.rs")]),t._v("\nfile. In the case of the super-runtime, this file is at "),a("code",[t._v("runtimes/super-runtime/src/lib.rs")]),t._v(". Because\nthis pallet's configuration trait is trivial, so is implementing it.")]),t._v(" "),a("div",{staticClass:"language-rust ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hello_substrate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("You can see the other pallets' trait implementations in the surrounding lines. Most of them are more\ncomplex.")]),t._v(" "),a("h3",{attrs:{id:"add-it-to-construct-runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-it-to-construct-runtime"}},[t._v("#")]),t._v(" Add it to "),a("code",[t._v("construct_runtime!")])]),t._v(" "),a("p",[t._v("Finally, we add our pallet to the\n"),a("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/frame_support/macro.construct_runtime.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("construct_runtime!")]),t._v(" macro"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("construct_runtime!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("Runtime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeBlock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("opaque"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UncheckedExtrinsic")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UncheckedExtrinsic")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloSubstrate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("hello_substrate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("This macro does the heavy lifting of composing each individual pallet into a single usable runtime.\nLet's explain the syntax for each line. Each Pallet listed in the macro needs several pieces of\ninformation.")]),t._v(" "),a("p",[t._v("First is a convenient name to give to this pallet. We've chosen "),a("code",[t._v("HelloSubstrate")]),t._v(". It is common to\nchoose the same name as the pallet itself except when there is\n"),a("RouterLink",{attrs:{to:"/zh/3-entrees/instantiable.html"}},[t._v("more than one instance")]),t._v(". Next is the name of the crate that the\npallet lives in. And finally there is a list of features the pallet provides. All pallets require\n"),a("code",[t._v("Module")]),t._v(". Our pallet also provides dispatchable calls, so it requires "),a("code",[t._v("Call")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"try-it-out"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#try-it-out"}},[t._v("#")]),t._v(" Try it Out")]),t._v(" "),a("p",[t._v("If you haven't already, try interacting with the pallet using the Apps UI. You should see your\nmessage printed to the log of your node. Remember to run the kitchen node with the correct flags:\n"),a("code",[t._v("./target/release/kitchen-node --dev -lruntime=debug")])]),t._v(" "),a("p",[t._v("You're now well on your way to becoming a blockchain chef. Let's continue to build our skills with\nanother appetizer.")])])}),[],!1,null,null,null);e.default=n.exports}}]);