(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{550:function(t,e,a){"use strict";a.r(e);var s=a(4),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tutorial-series-for-using-cryptography-on-substrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-series-for-using-cryptography-on-substrate"}},[t._v("#")]),t._v(" Tutorial Series for Using Cryptography on Substrate")]),t._v(" "),a("blockquote",[a("p",[t._v("just an idea")])]),t._v(" "),a("h2",{attrs:{id:"hashing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashing"}},[t._v("#")]),t._v(" Hashing")]),t._v(" "),a("p",[t._v("Substrate provides in-built support for hashing data with BlakeTwo256 algorithm. We can get this\nfrom the "),a("code",[t._v("system")]),t._v(" trait.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("use runtime_primitives::traits::Hash;\nuse frame_support::{dispatch::Result};\nuse {system::{self}};\n\npub trait Trait: system::Trait {}\n\ndecl_module! {\n  pub struct Module<T: Trait> for enum Call where origin: T::Origin {\n    pub fn get_hash(_origin, data: Vec<u8>) -> Result {\n      let _digest = <<T as system::Trait>::Hashing as Hash>::hash(&data);\n      Ok(())\n    }\n  }\n}\n")])])]),a("p",[t._v("The Hashing type under the system trait expoises a function called "),a("code",[t._v("hash")]),t._v(". This function takes a\nreference of a byte array ("),a("code",[t._v("Vec<u8>")]),t._v(") and produces a BlakeTwo256 hash digest of it.")]),t._v(" "),a("p",[t._v("The code from above contained a function "),a("code",[t._v("get_hash")]),t._v(" which takes a "),a("code",[t._v("Vec<u8>")]),t._v(" parameter "),a("code",[t._v("data")]),t._v(" and\ncalls the "),a("code",[t._v("hash")]),t._v(" function on it.")])])}),[],!1,null,null,null);e.default=r.exports}}]);