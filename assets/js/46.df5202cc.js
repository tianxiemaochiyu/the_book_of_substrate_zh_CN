(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{528:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"runtime-apis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runtime-apis"}},[t._v("#")]),t._v(" Runtime APIs")]),t._v(" "),s("p",[s("code",[t._v("pallets/sum-storage")]),t._v(" "),s("a",{attrs:{href:"https://playground-staging.substrate.dev/?deploy=recipes&files=%2Fhome%2Fsubstrate%2Fworkspace%2Fpallets%2Fsum-storage%2Fsrc%2Flib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Playground-Try%20it!-brightgreen?logo=Parity%20Substrate",alt:"Try on playground"}}),t._v(" "),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/substrate-developer-hub/recipes/tree/master/pallets/sum-storage/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Github-View%20Code-brightgreen?logo=github",alt:"View on GitHub"}}),t._v(" "),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("runtimes/api-runtime")]),t._v(" "),s("a",{attrs:{href:"https://playground-staging.substrate.dev/?deploy=recipes&files=%2Fhome%2Fsubstrate%2Fworkspace%2Fruntimes%2Fapi-runtime%2Fsrc%2Flib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Playground-Try%20it!-brightgreen?logo=Parity%20Substrate",alt:"Try on playground"}}),t._v(" "),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/substrate-developer-hub/recipes/tree/master/runtimes/api-runtime/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Github-View%20Code-brightgreen?logo=github",alt:"View on GitHub"}}),t._v(" "),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v('Each Substrate node contains a runtime. The runtime contains the business logic of the chain. It\ndefines what transactions are valid and invalid and determines how the chain\'s state changes in\nresponse to transactions. The runtime is compiled to Wasm to facilitate runtime upgrades. The "outer\nnode", everything other than the runtime, does not compile to Wasm, only to native. The outer node\nis responsible for handling peer discovery, transaction pooling, block and transaction gossiping,\nconsensus, and answering RPC calls from the outside world. While performing these tasks, the outer\nnode sometimes needs to query the runtime for information, or provide information to the runtime. A\nRuntime API facilitates this kind of communication between the outer node and the runtime. In this\nrecipe, we will write our own minimal runtime API.')]),t._v(" "),s("h2",{attrs:{id:"our-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#our-example"}},[t._v("#")]),t._v(" Our Example")]),t._v(" "),s("p",[t._v("For this example, we will write a pallet called "),s("code",[t._v("sum-storage")]),t._v(" with two storage items, both "),s("code",[t._v("u32")]),t._v("s.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("decl_storage!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Store")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TemplateModule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("thing1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Option")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("thing2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Option")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Substrate already comes with a runtime API for querying storage values, which is why we can easily\nquery our two storage values from a front-end. In this example we imagine that the outer node is\ninterested in knowing the "),s("em",[t._v("sum")]),t._v(" of the two values, rather than either individual value. Our runtime\nAPI will provide a way for the outer node to query the runtime for this sum. Before we define the\nactual runtime API, let's write a public helper function in the pallet to do the summing.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("get_sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("So far, nothing we've done is specific to runtime APIs. In the coming sections, we will use this\nhelper function in our runtime API's implementation.")]),t._v(" "),s("h2",{attrs:{id:"defining-the-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defining-the-api"}},[t._v("#")]),t._v(" Defining the API")]),t._v(" "),s("p",[t._v("The first step in adding a runtime API to your runtime is defining its interface using a Rust trait.\nThis is done in the "),s("code",[t._v("sum-storage/runtime-api/src/lib.rs")]),t._v(" file. This file can live anywhere you like,\nbut because it defines an API that is closely related to a particular pallet, it makes sense to\ninclude the API definition in the pallet's directory.")]),t._v(" "),s("p",[t._v("The code to define the API is quite simple, and looks almost like any old Rust trait. The one\naddition is that it must be placed in the\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_api/macro.decl_runtime_apis.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("decl_runtime_apis!")]),t._v(" macro"),s("OutboundLink")],1),t._v(". This\nmacro allows the outer node to query the runtime API at specific blocks. Although this runtime API\nonly provides a single function, you may write as many as you like.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sp_api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("decl_runtime_apis!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumStorageApi")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("get_sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"implementing-the-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implementing-the-api"}},[t._v("#")]),t._v(" Implementing the API")]),t._v(" "),s("p",[t._v("With our pallet written and our runtime API defined, we may now implement the API for our runtime.\nThis happens in the main runtime aggregation file. In our case we've provided the "),s("code",[t._v("api-runtime")]),t._v(" in\n"),s("code",[t._v("runtimes/api-runtime/src/lib.rs")]),t._v(".")]),t._v(" "),s("p",[t._v("As with defining the API, implementing a runtime API looks similar to implementing any old Rust\ntrait with the exception that the implementation must go inside of the\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_api/macro.impl_runtime_apis.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("impl_runtime_apis!")]),t._v(" macro"),s("OutboundLink")],1),t._v(". Every\nruntime must use "),s("code",[t._v("iml_runtime_apis!")]),t._v(" because the\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_api/trait.Core.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Core")]),t._v(" API"),s("OutboundLink")],1),t._v(" is required. We will add an\nimplementation for our own API alongside the others in this macro. Our implementation is\nstraight-forward as it merely calls the pallet's helper function that we wrote previously.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("impl_runtime_apis!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sum_storage_rpc_runtime_api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumStorageApi")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("get_sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("u32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumStorage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("You may be wondering about the "),s("code",[t._v("Block")]),t._v(" type parameter which is present here, but not in our\ndefinition. This type parameter is added by the macros along with a few other features. All runtime\nAPIs have this type parameter to facilitate querying the runtime at arbitrary blocks. Read more\nabout this in the docs for\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sp_api/macro.impl_runtime_apis.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("impl_runtime_apis!")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"calling-the-runtime-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#calling-the-runtime-api"}},[t._v("#")]),t._v(" Calling the Runtime API")]),t._v(" "),s("p",[t._v("We've now successfully added a runtime API to our runtime. The outer node can now call this API to\nquery the runtime for the sum of two storage values. Given a reference to a\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sc_service/client/struct.Client.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("'client'"),s("OutboundLink")],1),t._v(" we can make the call like\nthis.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_at_block_fifty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_api")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This recipe was about defining and implementing a custom runtime API. To see an example of calling\nthis API in practice, see the recipe on "),s("RouterLink",{attrs:{to:"/3-entrees/custom-rpc.html"}},[t._v("custom RPCs")]),t._v(", where we connect this\nruntime API to an RPC that can be called by an end user.")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);