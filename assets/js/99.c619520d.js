(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{585:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"manual-seal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manual-seal"}},[t._v("#")]),t._v(" Manual Seal")]),t._v(" "),s("p",[s("code",[t._v("nodes/manual-seal")]),t._v(" "),s("a",{attrs:{href:"https://playground-staging.substrate.dev/?deploy=recipes&files=%2Fhome%2Fsubstrate%2Fworkspace%2Fnodes%2Fmanual-seal%2Fsrc%2Flib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Playground-Try%20it!-brightgreen?logo=Parity%20Substrate",alt:"Try on playground"}}),t._v(" "),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/substrate-developer-hub/recipes/tree/master/nodes/manual-seal/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/Github-View%20Code-brightgreen?logo=github",alt:"View on GitHub"}}),t._v(" "),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("This recipe demonstrates a Substrate node using the\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sc_consensus_manual_seal/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Manual Seal consensus"),s("OutboundLink")],1),t._v(". Unlike the\nother consensus engines included with Substrate, manual seal does not create blocks on a regular\nbasis. Rather, it waits for an RPC call telling to create a block.")]),t._v(" "),s("h2",{attrs:{id:"using-manual-seal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-manual-seal"}},[t._v("#")]),t._v(" Using Manual Seal")]),t._v(" "),s("p",[t._v("Before we explore the code, let's begin by seeing how to use the manual-seal node. Build and start\nthe node in the usual way.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("cargo build --release -p manual-seal\n./target/release/manual-seal\n")])])]),s("h2",{attrs:{id:"manually-sealing-blocks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manually-sealing-blocks"}},[t._v("#")]),t._v(" Manually Sealing Blocks")]),t._v(" "),s("p",[t._v("Once your node is running, you will see that it just sits there idly. It will accept transactions to\nthe pool, but it will not author blocks on its own. In manual seal, the node does not author a block\nuntil we explicitly tell it to. We can tell it to author a block by calling the "),s("code",[t._v("engine_createBlock")]),t._v("\nRPC.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://localhost:9933 -H "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type:application/json;charset=utf-8"')]),t._v(" -d   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n     "jsonrpc":"2.0",\n      "id":1,\n      "method":"engine_createBlock",\n      "params": [true, false, null]\n    }\'')]),t._v("\n")])])]),s("p",[t._v("This call takes three parameters, each of which are worth exploring.")]),t._v(" "),s("h3",{attrs:{id:"create-empty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-empty"}},[t._v("#")]),t._v(" Create Empty")]),t._v(" "),s("p",[s("code",[t._v("create_empty")]),t._v(" is a Boolean value indicating whether empty blocks may be created. Setting\n"),s("code",[t._v("create-empty")]),t._v(" to true does not mean that an empty block will necessarily be created. Rather it\nmeans that the engine should go ahead creating a block even if no transaction are present. If\ntransactions are present in the queue, they will be included regardless of "),s("code",[t._v("create_empty")]),t._v("'s value.'")]),t._v(" "),s("h3",{attrs:{id:"finalize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finalize"}},[t._v("#")]),t._v(" Finalize")]),t._v(" "),s("p",[s("code",[t._v("finalize")]),t._v(" is a Boolean indicating whether the block (and its ancestors, recursively) should be\nfinalized after creation. Manually controlling finality is interesting, but also dangerous. If you\nattempt to author and finalize a block that does not build on the best finalized chain, the block\nwill not be imported. If you finalize one block in one node, and a conflicting block in another\nnode, you will cause a safety violation when the nodes synchronize.")]),t._v(" "),s("h3",{attrs:{id:"parent-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parent-hash"}},[t._v("#")]),t._v(" Parent Hash")]),t._v(" "),s("p",[s("code",[t._v("parent_hash")]),t._v(" is an optional hash of a block to use as a parent. To set the parent, use the format\n"),s("code",[t._v('"0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764"')]),t._v(". To omit the parent, use\n"),s("code",[t._v("null")]),t._v(". When the parent is omitted the block is built on the current best block. Manually specifying\nthe parent is useful for constructing fork scenarios and demonstrating chain reorganizations.")]),t._v(" "),s("h2",{attrs:{id:"manually-finalizing-blocks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manually-finalizing-blocks"}},[t._v("#")]),t._v(" Manually Finalizing Blocks")]),t._v(" "),s("p",[t._v("In addition to finalizing blocks while creating them, they can be finalized later by using the\nsecond provided RPC call, "),s("code",[t._v("engine_finalizeBlock")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://localhost:9933 -H "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type:application/json;charset=utf-8"')]),t._v(" -d   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n     "jsonrpc":"2.0",\n      "id":1,\n      "method":"engine_finalizeBlock",\n      "params": ["0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764", null]\n    }\'')]),t._v("\n")])])]),s("p",[t._v("The two parameters are:")]),t._v(" "),s("ul",[s("li",[t._v("The hash of the block to finalize.")]),t._v(" "),s("li",[t._v("A Justification. TODO what is the justification and why might I want to use it?")])]),t._v(" "),s("h2",{attrs:{id:"building-the-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-the-service"}},[t._v("#")]),t._v(" Building the Service")]),t._v(" "),s("p",[t._v("So far we've learned how to use the manual seal node and why it might be useful. Let's now turn our\nattention to how the service is built in the nodes "),s("code",[t._v("src/service.rs")]),t._v(" file.")]),t._v(" "),s("h3",{attrs:{id:"the-import-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-import-queue"}},[t._v("#")]),t._v(" The Import Queue")]),t._v(" "),s("p",[t._v("We begin by creating a manual-seal import queue. This process is identical to creating the import\nqueue used in the "),s("RouterLink",{attrs:{to:"/zh/3-entrees/kitchen-node.html"}},[t._v("Kitchen Node")]),t._v(". It is also similar to, but simpler than, the\n"),s("RouterLink",{attrs:{to:"/zh/3-entrees/basic-pow.html"}},[t._v("basic-pow")]),t._v(" import queue.")],1),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("with_import_queue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token closure-params"}},[s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),t._v("_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _select_chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _transaction_pool"),s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sc_consensus_manual_seal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("import_queue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sc_client_db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Backend")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"what-about-the-light-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-about-the-light-client"}},[t._v("#")]),t._v(" What about the Light Client?")]),t._v(" "),s("p",[t._v("The light client is not yet supported in this node, but it likely will be in the future (See\n"),s("a",{attrs:{href:"https://github.com/substrate-developer-hub/recipes/pull/238",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue #238"),s("OutboundLink")],1),t._v(".) Because it will\ntypically be used for learning, experimenting, and testing in a single-node environment this\nrestriction should not cause many problems.. Instead we mark it as "),s("code",[t._v("unimplemented!")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Builds a new service for a light client.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("new_light")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("unimplemented!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No light client for manual seal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This needs to be here or it won't compile.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[allow(unreachable_code)]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new_full")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Because the return type of this function contains "),s("code",[t._v("impl AbstractService")]),t._v(", Rust's typechecker is\nunable to infer the concrete type. We give it a hand by calling "),s("code",[t._v("new_full")]),t._v(" at the end, but don't\nworry, this code will never actually be executed. "),s("code",[t._v("unimplemented!")]),t._v(" will panic first.")]),t._v(" "),s("h3",{attrs:{id:"the-manual-seal-rpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-manual-seal-rpc"}},[t._v("#")]),t._v(" The Manual Seal RPC")]),t._v(" "),s("p",[t._v("Because the node runs in manual seal mode, we need to wire up the RPC commands that we explored\nearlier. This process is nearly identical to those described in the\n"),s("RouterLink",{attrs:{to:"/zh/3-entrees/custom-rpc.html"}},[t._v("custom rpc recipe")]),t._v(".")],1),t._v(" "),s("p",[t._v("As prep work, we make a type alias,")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcExtension")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jsonrpc_core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoHandler")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("sc_rpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Metadata")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Next we create a channel over which the rpc handler and the authorship task can communicate with one\nanother. The RPC handler will send messages asking to create or finalize a block and the import\nqueue will receive the message and do so.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// channel for the rpc handler to communicate with the authorship task.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command_sink"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commands_stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("channel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("mpsc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("channel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" service "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// manual-seal relies on receiving sealing requests aka EngineCommands over rpc.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("with_rpc_extensions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token closure-params"}},[s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcExtension")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" io "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jsonrpc_core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("extend_with")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We provide the rpc handler with the sending end of the channel to allow the rpc")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// send EngineCommands to the background block authorship task.")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("rpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ManualSealApi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_delegate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("rpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ManualSeal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command_sink"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"the-authorship-task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-authorship-task"}},[t._v("#")]),t._v(" The Authorship Task")]),t._v(" "),s("p",[t._v("As with every authoring engine, manual seal needs to be run as an "),s("code",[t._v("async")]),t._v(" authoring tasks. Here we\nprovide the receiving end of the channel we created earlier.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Background authorship future.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" authorship_future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("manual_seal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_manual_seal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tproposer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transaction_pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tcommands_stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select_chain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tinherent_data_providers\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("With the future created, we can now kick it off using the service's\n"),s("a",{attrs:{href:"https://substrate.dev/rustdocs/v2.0.0-rc4/sc_service/struct.Service.html#method.spawn_essential_task",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("spawn_essential_task")]),t._v(" method"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we spawn the future on a background thread managed by service.")]),t._v("\nservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn_essential_task_handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn_blocking")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"manual-seal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" authorship_future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"combining-instant-seal-with-manual-seal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#combining-instant-seal-with-manual-seal"}},[t._v("#")]),t._v(" Combining Instant Seal with Manual Seal")]),t._v(" "),s("p",[t._v("It is possible to combine the manual seal of the node we built above with the functionality of the\n"),s("RouterLink",{attrs:{to:"/zh/3-entrees/kitchen-node.html"}},[t._v("Kitchen Node's")]),t._v(" instant seal to get the best of both worlds. This configuration\nmay be desirable in development and testing environments. We can use the normal behavior of instant\nseal to create blocks any time a transaction is imported into the pool. On the other hand we can\nmove forward in block number by instantly sealing empty blocks. The functionality may be familiar to\ndevelopers of Ethereum smart contracts that have used "),s("code",[t._v("ganache-cli")]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"implementation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),s("p",[t._v("In the same directory for the manual seal node is a file called "),s("code",[t._v("combined_service.rs")]),t._v(". This file\ncontains modified code of the "),s("code",[t._v("service.rs")]),t._v(" file we just looked at in the section above. Some modification have been made. These modifications are\nnumbered and begin at line 85 in the source.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transaction_pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The first step is to create an instance of a transaction pool that will be shared between the\n"),s("code",[t._v("pool_stream")]),t._v(" which receives events whenever a new transaction is imported and the service builder.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pool_stream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("validated_pool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("import_notification_stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token closure-params"}},[s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[t._v("|")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Every new block create an `EngineCommand` that will seal a new block.")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("rpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EngineCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SealNewBlock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tcreate_empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tfinalize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tparent_hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tsender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Next we implement the instant seal just as it's implemented under the covers in the call to\n"),s("code",[t._v("run_instant_seal")]),t._v(". Namely, we make sure that any new notifications we will submit an RPC\n"),s("code",[t._v("EngineCommand")]),t._v(" to seal a new block.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" combined_stream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commands_stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pool_stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("We combine the futures using the "),s("code",[t._v("select")]),t._v(" utility which will receive events from either one of the\nstreams we pass to it. In this case, we're passing all notifications received from the manual seal\nstream and the instant seal stream together.")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" authorship_future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("manual_seal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run_manual_seal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tproposer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4) vvvvv")]),t._v("\n\tpool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <- Use the same pool that we used to get `pool_stream`.")]),t._v("\n\tcombined_stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <- Here we place the combined streams.")]),t._v("\n\tservice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select_chain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tinherent_data_providers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Finally we initialize the "),s("code",[t._v("authorship_future")]),t._v(" with the combined streams.")]),t._v(" "),s("p",[t._v("In order to run this variant of the node you will need to uncomment two lines and rebuild the node.\nIn "),s("code",[t._v("command.rs")]),t._v(" comment the line that reads "),s("code",[t._v("use crate::service;")]),t._v(" and uncomment\n"),s("code",[t._v("use crate::combined_service as service;")]),t._v(". In "),s("code",[t._v("main.rs")]),t._v(" comment "),s("code",[t._v("mod service;")]),t._v(" and uncomment\n"),s("code",[t._v("mod combined_service'")]),t._v(". Now you can rebuild the node and test out that it will seal blocks using\nthe manual method and the instant method together.")])])}),[],!1,null,null,null);a.default=e.exports}}]);